generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Citizen {
  id                   String            @id @default(cuid())
  phoneNumberEncrypted String            @unique
  phoneNumberHash      String            @unique
  emailEncrypted       String?
  emailHash            String?
  name                 String?
  isPhoneVerified      Boolean           @default(false)
  isIdentityVerified   Boolean           @default(false)
  totalPoints          Int               @default(0)
  pointsEarned         Int               @default(0)
  pointsRedeemed       Int               @default(0)
  reportsSubmitted     Int               @default(0)
  reportsApproved      Int               @default(0)
  accuracyRate         Float             @default(0.0)
  isAnonymousMode      Boolean           @default(false)
  notificationEnabled  Boolean           @default(true)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  lastLoginAt          DateTime?
  isActive             Boolean           @default(true)
  reports              ViolationReport[]
  feedback             Feedback[]

  @@index([phoneNumberHash])
  @@index([emailHash])
}

model User {
  id              String            @id @default(cuid())
  emailEncrypted  String            @unique
  emailHash       String            @unique
  passwordHash    String
  name            String
  role            String
  department      String
  city            String
  district        String
  badgeNumber     String            @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastLoginAt     DateTime?
  reviewedReports ViolationReport[]
  feedback        Feedback[]
  assignedFeedback Feedback[] @relation("AssignedFeedback")
  feedbackResponses FeedbackResponse[]

  @@index([emailHash])
  @@index([badgeNumber])
}

model ViolationReport {
  id                     Int       @id @default(autoincrement())
  reporterId             String
  reporterPhoneEncrypted String
  reporterPhoneHash      String
  reporterCity           String
  reporterPincode        String
  violationType          String
  severity               String?
  description            String?
  timestamp              DateTime
  latitude               Float
  longitude              Float
  addressEncrypted       String
  pincode                String
  city                   String
  district               String
  state                  String
  vehicleNumberEncrypted String?
  vehicleType            String?
  vehicleColor           String?
  photoUrl               String?
  videoUrl               String?
  mediaMetadata          String?
  status                 String    @default("PENDING")
  isDuplicate            Boolean   @default(false)
  duplicateGroupId       String?
  confidenceScore        Float?
  reviewerId             String?
  reviewTimestamp        DateTime?
  reviewNotes            String?
  challanIssued          Boolean   @default(false)
  challanNumber          String?
  pointsAwarded          Int       @default(0)
  isFirstReporter        Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isAnonymous            Boolean   @default(false)
  citizenId              String
  reviewer               User?     @relation(fields: [reviewerId], references: [id])
  citizen                Citizen   @relation(fields: [citizenId], references: [id])
  feedback               Feedback[]

  @@index([status])
  @@index([city])
  @@index([violationType])
  @@index([createdAt])
  @@index([citizenId])
  @@index([reporterPhoneHash])
}

model OTP {
  id                   String   @id @default(cuid())
  phoneNumberEncrypted String
  phoneNumberHash      String
  otp                  String
  expiresAt            DateTime
  isUsed               Boolean  @default(false)
  createdAt            DateTime @default(now())

  @@index([phoneNumberHash])
  @@index([expiresAt])
}

model Feedback {
  id                String        @id @default(cuid())
  feedbackType      String        // APP_FEEDBACK, REPORT_FEEDBACK, SERVICE_FEEDBACK, FEATURE_REQUEST
  category          String        // UI_UX, BUG, PERFORMANCE, SUGGESTION, COMPLAINT, PRAISE
  title             String
  description       String
  rating            Int?          // 1-5 rating (optional)
  priority          String        // LOW, MEDIUM, HIGH, CRITICAL
  status            String        @default("PENDING") // PENDING, IN_REVIEW, RESOLVED, CLOSED
  isAnonymous       Boolean       @default(false)
  contactEmail      String?       // For follow-up
  contactPhone      String?       // For follow-up
  attachments       String?       // JSON array of file URLs
  metadata          String?       // JSON for additional data
  assignedTo        String?       // User ID of assigned reviewer
  resolutionNotes   String?
  resolvedAt        DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  citizenId         String?       // If feedback from citizen
  userId            String?       // If feedback from police user
  reportId          Int?          // If feedback related to specific report
  
  citizen           Citizen?      @relation(fields: [citizenId], references: [id])
  user              User?         @relation(fields: [userId], references: [id])
  report            ViolationReport? @relation(fields: [reportId], references: [id])
  assignedUser      User?         @relation("AssignedFeedback", fields: [assignedTo], references: [id])
  responses         FeedbackResponse[]

  @@index([feedbackType])
  @@index([category])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([citizenId])
  @@index([userId])
  @@index([reportId])
  @@index([assignedTo])
}

model FeedbackResponse {
  id          String   @id @default(cuid())
  feedbackId  String
  responderId String   // User ID of police responder
  message     String
  isInternal  Boolean  @default(false) // Internal note vs public response
  createdAt   DateTime @default(now())
  
  // Relationships
  feedback    Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  responder   User     @relation(fields: [responderId], references: [id])

  @@index([feedbackId])
  @@index([responderId])
  @@index([createdAt])
}
